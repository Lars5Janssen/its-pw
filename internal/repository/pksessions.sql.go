// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pksessions.sql

package repository

import (
	"context"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (user_id, session_id, session_data)
VALUES ($1, $2, $3)
`

type CreateSessionParams struct {
	UserID      []byte
	SessionID   string
	SessionData []byte
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.Exec(ctx, createSession, arg.UserID, arg.SessionID, arg.SessionData)
	return err
}

const deleteSessionByUserId = `-- name: DeleteSessionByUserId :exec
DELETE FROM sessions
WHERE user_id = $1
`

func (q *Queries) DeleteSessionByUserId(ctx context.Context, userID []byte) error {
	_, err := q.db.Exec(ctx, deleteSessionByUserId, userID)
	return err
}

const getSessionBySessionId = `-- name: GetSessionBySessionId :one
SELECT user_id, session_id, session_data FROM sessions
WHERE session_id = $1
LIMIT 1
`

func (q *Queries) GetSessionBySessionId(ctx context.Context, sessionID string) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionBySessionId, sessionID)
	var i Session
	err := row.Scan(&i.UserID, &i.SessionID, &i.SessionData)
	return i, err
}

const getSessionByUserId = `-- name: GetSessionByUserId :one
SELECT user_id, session_id, session_data FROM sessions
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetSessionByUserId(ctx context.Context, userID []byte) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByUserId, userID)
	var i Session
	err := row.Scan(&i.UserID, &i.SessionID, &i.SessionData)
	return i, err
}
