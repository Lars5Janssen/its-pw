// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pwusers.sql

package repository

import (
	"context"
)

const addPwUser = `-- name: AddPwUser :exec
INSERT INTO pwusers (username, pw, totp_secret)
VALUES ($1, $2, $3)
`

type AddPwUserParams struct {
	Username   string
	Pw         []byte
	TotpSecret []byte
}

func (q *Queries) AddPwUser(ctx context.Context, arg AddPwUserParams) error {
	_, err := q.db.Exec(ctx, addPwUser, arg.Username, arg.Pw, arg.TotpSecret)
	return err
}

const deletePwUserByName = `-- name: DeletePwUserByName :exec
DELETE from pwusers
WHERE username = $1
`

func (q *Queries) DeletePwUserByName(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deletePwUserByName, username)
	return err
}

const getPwUserByName = `-- name: GetPwUserByName :one
SELECT username, pw, totp_secret FROM pwusers
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetPwUserByName(ctx context.Context, username string) (Pwuser, error) {
	row := q.db.QueryRow(ctx, getPwUserByName, username)
	var i Pwuser
	err := row.Scan(&i.Username, &i.Pw, &i.TotpSecret)
	return i, err
}

const updatePwUserPwByName = `-- name: UpdatePwUserPwByName :exec
UPDATE pwusers
SET pw = $2
WHERE username = $1
`

type UpdatePwUserPwByNameParams struct {
	Username string
	Pw       []byte
}

func (q *Queries) UpdatePwUserPwByName(ctx context.Context, arg UpdatePwUserPwByNameParams) error {
	_, err := q.db.Exec(ctx, updatePwUserPwByName, arg.Username, arg.Pw)
	return err
}

const updatePwUsertotpByName = `-- name: UpdatePwUsertotpByName :exec
UPDATE pwusers
SET totp_secret = $2
WHERE username = $1
`

type UpdatePwUsertotpByNameParams struct {
	Username   string
	TotpSecret []byte
}

func (q *Queries) UpdatePwUsertotpByName(ctx context.Context, arg UpdatePwUsertotpByNameParams) error {
	_, err := q.db.Exec(ctx, updatePwUsertotpByName, arg.Username, arg.TotpSecret)
	return err
}

const updateUserCredentials = `-- name: UpdateUserCredentials :exec
UPDATE users
SET credentials = $2
WHERE id = $1
`

type UpdateUserCredentialsParams struct {
	ID          []byte
	Credentials []byte
}

func (q *Queries) UpdateUserCredentials(ctx context.Context, arg UpdateUserCredentialsParams) error {
	_, err := q.db.Exec(ctx, updateUserCredentials, arg.ID, arg.Credentials)
	return err
}
