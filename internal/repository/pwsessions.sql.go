// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pwsessions.sql

package repository

import (
	"context"
	"time"
)

const createPwUserSession = `-- name: CreatePwUserSession :exec
INSERT INTO pwsessions (username, uuid, expires_at)
VALUES ($1, $2, $3)
`

type CreatePwUserSessionParams struct {
	Username  string
	Uuid      string
	ExpiresAt time.Time
}

func (q *Queries) CreatePwUserSession(ctx context.Context, arg CreatePwUserSessionParams) error {
	_, err := q.db.Exec(ctx, createPwUserSession, arg.Username, arg.Uuid, arg.ExpiresAt)
	return err
}

const deletePwUserSessionByUuid = `-- name: DeletePwUserSessionByUuid :exec
DELETE FROM pwsessions
WHERE uuid = $1
`

func (q *Queries) DeletePwUserSessionByUuid(ctx context.Context, uuid string) error {
	_, err := q.db.Exec(ctx, deletePwUserSessionByUuid, uuid)
	return err
}

const getPwUserSessionByName = `-- name: GetPwUserSessionByName :one
SELECT username, uuid, expires_at FROM pwsessions
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetPwUserSessionByName(ctx context.Context, username string) (Pwsession, error) {
	row := q.db.QueryRow(ctx, getPwUserSessionByName, username)
	var i Pwsession
	err := row.Scan(&i.Username, &i.Uuid, &i.ExpiresAt)
	return i, err
}

const getPwUserSessionByUuid = `-- name: GetPwUserSessionByUuid :many
SELECT username, uuid, expires_at FROM pwsessions
WHERE uuid = $1
`

func (q *Queries) GetPwUserSessionByUuid(ctx context.Context, uuid string) ([]Pwsession, error) {
	rows, err := q.db.Query(ctx, getPwUserSessionByUuid, uuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pwsession
	for rows.Next() {
		var i Pwsession
		if err := rows.Scan(&i.Username, &i.Uuid, &i.ExpiresAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
