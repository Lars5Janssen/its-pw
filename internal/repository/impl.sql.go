// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: impl.sql

package repository

import (
	"context"
)

const createImplSession = `-- name: CreateImplSession :exec
INSERT INTO implsessions (sid, username, client_nounce, own_nounce, session_key)
VALUES ($1, $2, $3, $4, $5)
`

type CreateImplSessionParams struct {
	Sid          string
	Username     *string
	ClientNounce string
	OwnNounce    string
	SessionKey   []byte
}

func (q *Queries) CreateImplSession(ctx context.Context, arg CreateImplSessionParams) error {
	_, err := q.db.Exec(ctx, createImplSession,
		arg.Sid,
		arg.Username,
		arg.ClientNounce,
		arg.OwnNounce,
		arg.SessionKey,
	)
	return err
}

const deleteAllSessions = `-- name: DeleteAllSessions :exec
DELETE FROM implsessions
`

func (q *Queries) DeleteAllSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllSessions)
	return err
}

const deleteImplSessionByUsername = `-- name: DeleteImplSessionByUsername :exec
DELETE FROM implsessions
WHERE username = $1
`

func (q *Queries) DeleteImplSessionByUsername(ctx context.Context, username *string) error {
	_, err := q.db.Exec(ctx, deleteImplSessionByUsername, username)
	return err
}

const getClientNouncebyUserName = `-- name: GetClientNouncebyUserName :one
SELECT client_nounce FROM implsessions
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetClientNouncebyUserName(ctx context.Context, username *string) (string, error) {
	row := q.db.QueryRow(ctx, getClientNouncebyUserName, username)
	var client_nounce string
	err := row.Scan(&client_nounce)
	return client_nounce, err
}

const getImplUserNameFromSID = `-- name: GetImplUserNameFromSID :one
SELECT username FROM implsessions
WHERE sid = $1
LIMIT 1
`

func (q *Queries) GetImplUserNameFromSID(ctx context.Context, sid string) (*string, error) {
	row := q.db.QueryRow(ctx, getImplUserNameFromSID, sid)
	var username *string
	err := row.Scan(&username)
	return username, err
}

const getOwnNouncebyUserName = `-- name: GetOwnNouncebyUserName :one
SELECT own_nounce FROM implsessions
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetOwnNouncebyUserName(ctx context.Context, username *string) (string, error) {
	row := q.db.QueryRow(ctx, getOwnNouncebyUserName, username)
	var own_nounce string
	err := row.Scan(&own_nounce)
	return own_nounce, err
}

const getSIDbyUserName = `-- name: GetSIDbyUserName :one
SELECT sid FROM implsessions
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetSIDbyUserName(ctx context.Context, username *string) (string, error) {
	row := q.db.QueryRow(ctx, getSIDbyUserName, username)
	var sid string
	err := row.Scan(&sid)
	return sid, err
}

const getSessionKeyBySID = `-- name: GetSessionKeyBySID :one
SELECT session_key FROM implsessions
WHERE sid = $1
LIMIT 1
`

func (q *Queries) GetSessionKeyBySID(ctx context.Context, sid string) ([]byte, error) {
	row := q.db.QueryRow(ctx, getSessionKeyBySID, sid)
	var session_key []byte
	err := row.Scan(&session_key)
	return session_key, err
}

const getSessionKeybyUserName = `-- name: GetSessionKeybyUserName :one
SELECT session_key FROM implsessions
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetSessionKeybyUserName(ctx context.Context, username *string) ([]byte, error) {
	row := q.db.QueryRow(ctx, getSessionKeybyUserName, username)
	var session_key []byte
	err := row.Scan(&session_key)
	return session_key, err
}
